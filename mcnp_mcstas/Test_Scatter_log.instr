/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: test (rename also the example and DEFINE lines below)
*
* %Identification
* Written by: Your name (email)
* Date: Current Date
* Origin: Your institution
* Release: McStas CVS-080208
* Version: 0.2
* %INSTRUMENT_SITE: Institution_name_as_a_single word
*
* Instrument short description
*
* %Description
* Instrument longer description (type, elements, usage...)
*
* Example: mcrun test.instr <parameters=values>
*
* %Parameters
* Par1: [unit] Parameter1 description
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT test(Par1=1)

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
%}




/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
AT (0,0,0) ABSOLUTE


  //COMPONENT src = Source_simple(
  //    radius = 0.1, dist = 1, focus_xw = 0.1, focus_yh = 0.1, lambda0=10, dlambda=1)
  //AT (0, 0, 0) RELATIVE Origin


  //read rssa file                                                                                                                   
COMPONENT src = Virtual_mcnp_ss_input(
   )
  AT (0, 0, 0.001) RELATIVE Origin

  
COMPONENT s1=Scatter_logger()
AT(0,0,2.0) RELATIVE src
  /*
COMPONENT guide_simple = Guide(w1 = 0.04, h1 = 0.04, w2 = 0.04, h2 = 0.04, l = 50, R0 = 0.99,
			       Qc = 0.0219, alpha = 6.07, m = 3, W = 0.003)
AT (0, 0, 2.001) RELATIVE src
  */

  /*   
COMPONENT guide_simple = Bender(w=0.04, h=0.04,r=150,l=50,
				 R0a=0.99,Qca=0.0219,alphaa=6.07,ma=3,Wa=0.003,
				 R0i=0.99,Qci=0.0219,alphai=6.07,mi=3,Wi=0.003,
				 R0s=0.99,Qcs=0.0219,alphas=6.07,ms=3,Ws=0.003)
AT (0, 0, 2.001) RELATIVE src
  */
COMPONENT guide_simple = Guide_curved(w1=0.04, h1=0.04, l=50.0, R0=0.99, Qc=0.0219,alpha=6.07, m=3, W=0.003, curvature=1500) 
  AT (0, 0, 2.001) RELATIVE src  ROTATED (0,0,-90)  RELATIVE src



COMPONENT s2=Scatter_logger_stop(logger=s1)
AT(0,0,0) RELATIVE PREVIOUS

/*The iterator test code*/

COMPONENT a0=Arm()
AT(0,0,0) ABSOLUTE


  //COMPONENT testwrite = Virtual_mcnp_ss_output(
  // )
  //AT (0, 0.0, 0.0) ABSOLUTE

COMPONENT iter1 = Scatter_log_iterator()
AT(0,0,0) ABSOLUTE

COMPONENT testwrite = Virtual_mcnp_ss_output(
 )
AT (0, 0.0, 0.0) ABSOLUTE

COMPONENT printout = Arm()
AT(0,0,0) RELATIVE PREVIOUS
EXTEND
%{
  /*print the neutron state*/
  //  	      printf("SCATTERLOG_ITERATOR: %llu %g %g %g  %g %g %g  %g  %g %g %g  %g  %d\n", \
  //    	     mcget_run_num(),x,y,z, vx, vy, vz, t,		\
  //   	     sx, sy, sz, p, INDEX_CURRENT_COMP);

// printf("EK ns_tilde  %g \n",ns_tilde[10] );
  /*EK write ssw*/
  
%}
  
COMPONENT iter2 = Scatter_log_iterator_stop(iterator=iter1)
AT(0,0,0) RELATIVE PREVIOUS

COMPONENT a1 = Arm()
AT (0,0,0) ABSOLUTE
JUMP a0 WHEN(MC_GETPAR(iter2,loop))

COMPONENT Dummy = Arm()
AT (10,0,50) ABSOLUTE

/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END

